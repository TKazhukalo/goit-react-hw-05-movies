{"version":3,"file":"static/js/736.eac4187c.chunk.js","mappings":"8RAEaA,EAASC,EAAAA,GAAAA,GAAD,4IAORC,EAAWD,EAAAA,GAAAA,GAAH,4C,mBCsCrB,EAxCa,WACT,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAeA,OAdAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,oGAEZF,GAAW,GAFC,UAGOG,EAAAA,EAAAA,IAAWT,GAHlB,OAGNG,EAHM,OAIZC,EAAQD,GAJI,gDAMZO,QAAQC,IAAR,MANY,yBAQXL,GAAW,GARA,4EAAH,qDAWjBE,GACH,GAAE,CAACR,KAEA,UAAC,IAAD,WACDK,IAAW,SAACO,EAAA,EAAD,KACV,SAACf,EAAD,UACCM,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,cAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAAWC,EAAtC,EAAsCA,aAAtC,OACE,UAACnB,EAAD,YACI,wBAAKiB,KACL,gBAAKG,IACbD,EAAY,yCAC0BA,GAD1B,6EAGZE,IAAKL,EAAeM,MAAM,SAClB,uBAAG,iBACH,uBAAIJ,MAROH,EADjB,QAiBjB,C,wFC5CYQ,E,QAAkBxB,EAAAA,IAAH,qE,SCU5B,EATgB,WACb,OACD,UAACwB,EAAD,WAAiB,KAAC,SAAC,KAAD,CAClBD,MAAM,MACNE,MAAM,cAGP,C,yLCPKC,E,QAAUC,EAAAA,OAAa,CAC3BC,QAHe,gCAIfC,OAAQ,CAAEC,QAHI,sCAMHC,EAAW,mCAAG,sGACFL,EAAQM,IAAI,sBADV,uBACjBC,EADiB,EACjBA,KADiB,kBAElBA,EAAKC,SAFa,2CAAH,qDAIXC,EAAU,mCAAG,WAAOnB,GAAP,yFACDU,EAAQM,IAAR,gBAAqBhB,IADpB,uBAChBiB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVtB,EAAU,mCAAG,WAAMK,GAAN,yFACDU,EAAQM,IAAR,gBAAqBhB,EAArB,aADC,uBAChBiB,EADgB,EAChBA,KADgB,kBAEjBA,EAAK5B,MAFY,2CAAH,sDAIV+B,EAAU,mCAAG,WAAOpB,GAAP,yFACDU,EAAQM,IAAR,gBAAqBhB,EAArB,aADC,uBAChBiB,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,sDAIVG,EAAW,mCAAG,WAAOC,GAAP,yFACFZ,EAAQM,IAAR,eAA4B,CACjDH,OAAQ,CACNS,MAAAA,KAHqB,uBACjBL,EADiB,EACjBA,KADiB,kBAMlBA,EAAKC,SANa,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/api/apiMovies.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList=styled.ul`\n    display: flex;\n    justify-content:center;\n    flex-wrap: wrap;\n    padding: 0;\n    list-style-type: none;\n`\nexport const CastItem = styled.li`\n     width: 25%;\n\n`","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getCredits } from \"../api/apiMovies\";\nimport Loader from \"../Loader/Loader\";\nimport { CastItem, CastList } from \"./Cast.styled\";\nimport { Container } from \"../App/App.styled\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [loading, setLoading] = useState(false);\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                setLoading(true);\n                const cast = await getCredits(movieId);\n                setCast(cast);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                 setLoading(false);\n            }\n        };\n        fetchMovies();\n    }, [movieId]);\n    return (\n        <Container>\n      {loading && <Loader />}\n        <CastList>\n        {cast.map(({ id, original_name,name, character, profile_path }) =>(\n                    <CastItem key={id}>\n                        <h3>{name}</h3>\n                        <img src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n              } alt={original_name} width='120' />\n                        <p>Character: </p>\n                        <p>{character}</p>\n                    </CastItem>\n                )\n            )\n        }\n            </CastList>\n            </Container>\n    )\n}\nexport default Cast;","import styled from '@emotion/styled';\n\nexport const LoaderAnimation = styled.div`\n  display: flex;\n  justify-content: start;\n`","import React from \"react\";\nimport { InfinitySpin } from  'react-loader-spinner'\nimport {  LoaderAnimation } from \"./Loader.styled\";\n const Loader = () => {\n   return ( \n  <LoaderAnimation> <InfinitySpin \n  width='100'\n  color=\"#370574\" />\n       </LoaderAnimation>  \n    )\n}\n\nexport default Loader;","import axios from \"axios\";\nconst baseURL  = 'https://api.themoviedb.org/3/';\nconst api_key = '2161664d4314fc48afed48c009adafff';\nconst linkLib = axios.create({\n  baseURL ,\n  params: { api_key },\n});\n\nexport const getTrending = async () => {\n  const { data } = await linkLib.get('trending/movie/day');\n  return data.results;\n};\nexport const getDetails = async (id) => {\n  const { data } = await linkLib.get(`movie/${id}`);\n  return data;\n};\n\nexport const getCredits = async id => {\n  const { data } = await linkLib.get(`movie/${id}/credits`);\n  return data.cast;\n}\nexport const getReviews = async (id) => {\n  const { data } = await linkLib.get(`movie/${id}/reviews`);\n  return data.results;\n}\nexport const searchMovie = async (query) => {\n  const { data } = await linkLib.get(`search/movie`, {\n    params: {\n      query,\n    }\n  });\n  return data.results;\n}"],"names":["CastList","styled","CastItem","movieId","useParams","useState","cast","setCast","loading","setLoading","useEffect","fetchMovies","getCredits","console","log","Loader","map","id","original_name","name","character","profile_path","src","alt","width","LoaderAnimation","color","linkLib","axios","baseURL","params","api_key","getTrending","get","data","results","getDetails","getReviews","searchMovie","query"],"sourceRoot":""}